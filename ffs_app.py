# --- —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∏–∫—Å—ã –î–û –∏–º–ø–æ—Ä—Ç–∞ streamlit ---
import os
# –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π watcher, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å "inotify watch limit reached" –Ω–∞ Streamlit Cloud
os.environ["STREAMLIT_WATCHER_TYPE"] = "none"

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import csv
from fpdf import FPDF
import base64
from io import BytesIO

# ===================== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–ì–û PDF =====================

# –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã ‚Üí –ª–∞—Ç–∏–Ω–∏—Ü–∞ (—á—Ç–æ–±—ã fpdf –Ω–µ –ø–∞–¥–∞–ª –Ω–∞ –Æ–Ω–∏–∫–æ–¥–µ)
_CYR_MAP = str.maketrans({
    "–ê":"A","–ë":"B","–í":"V","–ì":"G","–î":"D","–ï":"E","–Å":"E","–ñ":"Zh","–ó":"Z","–ò":"I",
    "–ô":"Y","–ö":"K","–õ":"L","–ú":"M","–ù":"N","–û":"O","–ü":"P","–†":"R","–°":"S","–¢":"T",
    "–£":"U","–§":"F","–•":"Kh","–¶":"Ts","–ß":"Ch","–®":"Sh","–©":"Shch","–™":"","–´":"Y",
    "–¨":"","–≠":"E","–Æ":"Yu","–Ø":"Ya",
    "–∞":"a","–±":"b","–≤":"v","–≥":"g","–¥":"d","–µ":"e","—ë":"e","–∂":"zh","–∑":"z","–∏":"i",
    "–π":"y","–∫":"k","–ª":"l","–º":"m","–Ω":"n","–æ":"o","–ø":"p","—Ä":"r","—Å":"s","—Ç":"t",
    "—É":"u","—Ñ":"f","—Ö":"kh","—Ü":"ts","—á":"ch","—à":"sh","—â":"shch","—ä":"","—ã":"y",
    "—å":"","—ç":"e","—é":"yu","—è":"ya",
    "‚Äô":"'", "‚Äú":'"', "‚Äù":'"', "¬´":'"', "¬ª":'"', "‚Äî":"-", "‚Äì":"-"
})

def _to_pdf_safe(text: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –±–µ–∑–æ–ø–∞—Å–Ω—É—é –¥–ª—è fpdf (latin-1). –ï—Å–ª–∏ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç ‚Äî —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç."""
    if text is None:
        return ""
    try:
        text.encode("latin-1")
        return text  # —É–∂–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ
    except UnicodeEncodeError:
        t = text.translate(_CYR_MAP)
        # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –∑–∞–º–µ–Ω–∏–º –Ω–µ–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º
        return t.encode("latin-1", "replace").decode("latin-1")

# ===================== –ö–û–ù–§–ò–ì –°–¢–†–ê–ù–ò–¶–´ =====================

st.set_page_config(
    page_title="FFS Calculator",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
WEIGHTS = {
    "personal_growth": {"R": 0.3, "C": 0.3, "H": 0.2, "T": 0.2},
    "creativity": {"R": 0.2, "C": 0.2, "H": 0.2, "T": 0.4},
    "ethics": {"R": 0.35, "C": 0.3, "H": 0.25, "T": 0.1},
    "ai": {"R": 0.25, "C": 0.3, "H": 0.25, "T": 0.2}
}

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
RECOMMENDATIONS = {
    "R": [
        "–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –º—ã—Å–ª–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è",
        "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –º–µ–¥–∏—Ç–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏",
        "–ü–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
    ],
    "C": [
        "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ –Ω–∏—Ö —É—Ä–æ–∫–∏",
        "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏ –≤ –ø—Ä–∏–≤—ã—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö",
        "–†–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–ª—É—á–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ —Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å –Ω–µ–π"
    ],
    "H": [
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Ç—Ä–∏—Ü—É –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞)",
        "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø—É–ª—å—Å–∞–º–∏",
        "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –≤ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á"
    ],
    "T": [
        "–í—ã–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –º–æ–∑–≥–æ–≤—ã—Ö —à—Ç—É—Ä–º–æ–≤",
        "–ò–∑—É—á–∞–π—Ç–µ —Å–º–µ–∂–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∑–Ω–∞–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∏–¥–µ–π",
        "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É ¬´—Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏–º—É–ª–∞¬ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"
    ]
}

# –í–æ–ø—Ä–æ—Å—ã
QUESTIONS = {
    "R": [
        "–ù–∞—Å–∫–æ–ª—å–∫–æ –ª–µ–≥–∫–æ –≤—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π?",
        "–ù–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –≤—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ –ø—Ä–∏—á–∏–Ω—ã —ç–º–æ—Ü–∏–π –∏ —Ä–µ—à–µ–Ω–∏–π?",
        "–ú–æ–∂–µ—Ç–µ –ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö?",
        "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ —Å–≤–æ–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏?",
        "–ù–∞—Å–∫–æ–ª—å–∫–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏—è –≤ —Å—Ç—Ä–µ—Å—Å–µ?"
    ],
    "C": [
        "–ù–∞—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ –≤—ã —É—á–∏—Ç–µ—Å—å –Ω–∞ –æ—à–∏–±–∫–∞—Ö?",
        "–ù–∞—Å–∫–æ–ª—å–∫–æ –ª–µ–≥–∫–æ –º–µ–Ω—è–µ—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏?",
        "–ù–∞—Å–∫–æ–ª—å–∫–æ –≥–∏–±–∫–æ –≤—ã —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ –Ω–∞ –Ω–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è?",
        "–ú–æ–∂–µ—Ç–µ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–¥ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å?",
        "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å?"
    ],
    "H": [
        "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å—é?",
        "–ú–æ–∂–µ—Ç–µ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–º–∏ –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏?",
        "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∏–º–ø—É–ª—å—Å–∞–º–∏?",
        "–ú–æ–∂–µ—Ç–µ –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª—é–¥–µ–π?",
        "–ù–∞—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã?"
    ],
    "T": [
        "–ù–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç–µ –Ω–æ–≤—ã–µ –∏–¥–µ–∏?",
        "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞—à–∏ —Ä–µ—à–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã?",
        "–ú–æ–∂–µ—Ç–µ –ª–∏ —Å–æ—á–µ—Ç–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ?",
        "–ù–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –≤–∞—à–∏ –∏–¥–µ–∏ –ø–æ–ª–µ–∑–Ω—ã?",
        "–ù–∞—Å–∫–æ–ª—å–∫–æ –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã?"
    ]
}

def calculate_ffs(scores, context):
    weights = WEIGHTS[context]
    return sum(weights[comp] * scores[comp] for comp in scores)

def save_results(scores, ffs, context):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open("ffs_history.csv", "a", newline="") as f:
        writer = csv.writer(f)
        writer.writerow([timestamp, context, scores["R"], scores["C"], scores["H"], scores["T"], ffs])

def plot_radar(scores, ffs):
    labels = list(scores.keys())
    values = list(scores.values())
    values += values[:1]

    angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
    angles += angles[:1]

    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
    ax.plot(angles, values, 'o-', linewidth=2)
    ax.fill(angles, values, alpha=0.25)
    ax.set_thetagrids(np.degrees(angles[:-1]), labels)
    ax.set_ylim(0, 10)
    ax.set_title(f"Functional Freedom Score: {ffs:.2f}", size=14, weight='bold')

    return fig

def load_history():
    try:
        df = pd.read_csv("ffs_history.csv", names=["timestamp", "context", "R", "C", "H", "T", "FFS"])
        df["timestamp"] = pd.to_datetime(df["timestamp"])
        return df
    except FileNotFoundError:
        return pd.DataFrame()

def get_comparison_with_previous(current_ffs, current_scores):
    df = load_history()
    if len(df) > 1:
        previous = df.iloc[-2]  # –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        ffs_delta = current_ffs - previous["FFS"]
        scores_delta = {
            comp: current_scores[comp] - previous[comp]
            for comp in ["R", "C", "H", "T"]
        }
        return ffs_delta, scores_delta
    return None, None

def create_pdf_report(scores, ffs, context, ffs_delta=None, scores_delta=None):
    pdf = FPDF()
    pdf.add_page()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, _to_pdf_safe("FFS Assessment Report"), 0, 1, "C")
    pdf.ln(10)

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    pdf.set_font("Arial", "", 12)
    pdf.cell(0, 10, _to_pdf_safe(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"), 0, 1)
    pdf.cell(0, 10, _to_pdf_safe(f"Context: {context}"), 0, 1)
    pdf.cell(0, 10, _to_pdf_safe(f"Overall FFS: {ffs:.2f}"), 0, 1)

    if ffs_delta is not None:
        change_text = f"Change from previous: {ffs_delta:+.2f}"
        pdf.cell(0, 10, _to_pdf_safe(change_text), 0, 1)

    pdf.ln(10)

    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, _to_pdf_safe("Component Scores:"), 0, 1)
    pdf.set_font("Arial", "", 12)

    for comp in ["R", "C", "H", "T"]:
        comp_name = ["Reflection", "Correction", "Management", "Creativity"][["R", "C", "H", "T"].index(comp)]
        score_text = f"{comp_name}: {scores[comp]:.1f}/10"
        if scores_delta and comp in scores_delta:
            score_text += f" ({scores_delta[comp]:+.1f})"
        pdf.cell(0, 10, _to_pdf_safe(score_text), 0, 1)

    pdf.ln(10)

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, _to_pdf_safe("Recommendations:"), 0, 1)
    pdf.set_font("Arial", "", 12)

    for comp, score in scores.items():
        if score < 7:
            comp_name = ["Reflection", "Correction", "Management", "Creativity"][["R", "C", "H", "T"].index(comp)]
            pdf.set_font("Arial", "B", 12)
            pdf.cell(0, 10, _to_pdf_safe(f"{comp_name}:"), 0, 1)
            pdf.set_font("Arial", "", 12)
            for rec in RECOMMENDATIONS[comp]:
                pdf.multi_cell(0, 10, _to_pdf_safe(f"- {rec}"))
            pdf.ln(3)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    pdf_bytes = pdf.output(dest="S").encode("latin-1", "replace")
    pdf_output = BytesIO(pdf_bytes)
    pdf_output.seek(0)
    return pdf_output

def get_download_link(file_data, filename):
    pos = file_data.tell()
    file_data.seek(0)
    b64 = base64.b64encode(file_data.read()).decode()
    file_data.seek(pos)
    return f'<a href="data:application/octet-stream;base64,{b64}" download="{filename}">Download PDF Report</a>'

# ===================== UI =====================

st.title("üß† Functional Freedom Score Calculator")
st.markdown("–û—Ü–µ–Ω–∏—Ç–µ –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–±–æ–¥—É —á–µ—Ä–µ–∑ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—é, –∞–¥–∞–ø—Ç–∞—Ü–∏—é, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ")

st.sidebar.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
section = st.sidebar.radio("–ü–µ—Ä–µ–π—Ç–∏ –∫:", ["–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ü—Ä–æ–≥—Ä–µ—Å—Å", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"])

if section == "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
    st.header("–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞")

    context = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ü–µ–Ω–∫–∏:", list(WEIGHTS.keys()))

    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"):
        weights_df = pd.DataFrame.from_dict(WEIGHTS[context], orient='index', columns=['–í–µ—Å'])
        st.dataframe(weights_df.style.format('{:.2f}'))

    # –û—Ç–≤–µ—Ç—ã
    scores = {}
    st.subheader("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (–æ—Ü–µ–Ω–∫–∞ –æ—Ç 0 –¥–æ 10)")

    for comp in ["R", "C", "H", "T"]:
        st.markdown(f"### {comp} - {['–†–µ—Ñ–ª–µ–∫—Å–∏—è', '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ'][['R', 'C', 'H', 'T'].index(comp)]}")
        comp_scores = []
        for i, q in enumerate(QUESTIONS[comp]):
            score = st.slider(f"{i+1}. {q}", 0, 10, 5, key=f"{comp}_{i}")
            comp_scores.append(score)
        scores[comp] = float(np.mean(comp_scores))

    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å FFS"):
        ffs = float(calculate_ffs(scores, context))
        ffs_delta, scores_delta = get_comparison_with_previous(ffs, scores)

        col1, col2 = st.columns(2)
        with col1:
            if ffs_delta is not None:
                st.metric("–û–±—â–∏–π FFS", f"{ffs:.2f}", f"{ffs_delta:+.2f}")
            else:
                st.metric("–û–±—â–∏–π FFS", f"{ffs:.2f}")

            # progress(text=...) –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö, –ø–æ—ç—Ç–æ–º—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            for comp, score in scores.items():
                st.write(f"{comp}: {score:.1f}/10" + (f"  ({scores_delta[comp]:+.1f})" if scores_delta and comp in scores_delta else ""))
                st.progress(score / 10)

        with col2:
            fig = plot_radar(scores, ffs)
            st.pyplot(fig)

        st.subheader("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        for comp, score in scores.items():
            if score < 7:
                st.markdown(f"**{comp} - {['–†–µ—Ñ–ª–µ–∫—Å–∏—è', '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ'][['R', 'C', 'H', 'T'].index(comp)]}**")
                for rec in RECOMMENDATIONS[comp]:
                    st.markdown(f"- {rec}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞
        try:
            pdf_report = create_pdf_report(scores, ffs, context, ffs_delta, scores_delta)
            st.markdown(get_download_link(pdf_report, "ffs_report.pdf"), unsafe_allow_html=True)
        except Exception as e:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF. –ù–æ —Å–∞–º —Ä–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: " + str(e))

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        save_results(scores, ffs, context)
        st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

elif section == "–ü—Ä–æ–≥—Ä–µ—Å—Å":
    st.header("–ò—Å—Ç–æ—Ä–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å")
    df = load_history()

    if df.empty:
        st.info("–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")
    else:
        contexts = st.multiselect("–§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º:", options=df["context"].unique(), default=list(df["context"].unique()))
        components = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            options=["R", "C", "H", "T", "FFS"],
            default=["FFS", "R", "C", "H", "T"]
        )

        if contexts and components:
            filtered_df = df[df["context"].isin(contexts)]
            st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
            fig, ax = plt.subplots(figsize=(10, 6))

            for ctx in contexts:
                context_data = filtered_df[filtered_df["context"] == ctx]
                for comp in components:
                    label = f"{ctx} - {'FFS' if comp=='FFS' else ['–†–µ—Ñ–ª–µ–∫—Å–∏—è','–ö–æ—Ä—Ä–µ–∫—Ü–∏—è','–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ','–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ'][['R','C','H','T'].index(comp)]}"
                    ax.plot(context_data["timestamp"], context_data[comp], marker='o', label=label)

            ax.set_title("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏")
            ax.set_xlabel("–î–∞—Ç–∞")
            ax.set_ylabel("–ë–∞–ª–ª—ã")
            ax.legend()
            ax.grid(True)
            plt.xticks(rotation=45)
            st.pyplot(fig)

            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–π", len(filtered_df))
            with col2:
                latest_ffs = float(filtered_df["FFS"].iloc[-1])
                prev_ffs = float(filtered_df["FFS"].iloc[-2]) if len(filtered_df) > 1 else latest_ffs
                st.metric("–ü–æ—Å–ª–µ–¥–Ω–∏–π FFS", f"{latest_ffs:.2f}", f"{(latest_ffs - prev_ffs):+.2f}")
            with col3:
                st.metric("–°—Ä–µ–¥–Ω–∏–π FFS", f"{filtered_df['FFS'].mean():.2f}")

elif section == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
    st.header("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é")
    df = load_history()

    if df.empty:
        st.info("–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
    else:
        latest = df.iloc[-1]
        scores = {comp: float(latest[comp]) for comp in ["R", "C", "H", "T"]}

        st.subheader("–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        for comp, score in scores.items():
            if score < 7:
                comp_name = ["–†–µ—Ñ–ª–µ–∫—Å–∏—è", "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ"][["R", "C", "H", "T"].index(comp)]
                st.markdown(f"### {comp_name} ({score:.1f}/10)")
                for i, rec in enumerate(RECOMMENDATIONS[comp]):
                    st.markdown(f"{i+1}. {rec}")
                st.markdown("---")

        st.subheader("–ü–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è")
        weak_components = [comp for comp, score in scores.items() if score < 7]
        if weak_components:
            st.write("–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–∏ —ç—Ç–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
            for comp in weak_components:
                comp_name = ["–†–µ—Ñ–ª–µ–∫—Å–∏—è", "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ"][["R", "C", "H", "T"].index(comp)]
                st.markdown(f"- **{comp_name}**")
            st.write("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:")
            st.markdown("""
            1. –í—ã–¥–µ–ª–∏—Ç–µ 15‚Äì20 –º–∏–Ω—É—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏  
            2. –ù–∞—á–Ω–∏—Ç–µ —Å —Å–∞–º–æ–≥–æ —Å–ª–∞–±–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞  
            3. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é  
            4. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥—Ö–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤  
            """)
        else:
            st.success("–í—Å–µ –≤–∞—à–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–∑–≤–∏—Ç—ã —Ö–æ—Ä–æ—à–æ! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –±–∞–ª–∞–Ω—Å –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã.")

        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"):
            try:
                pdf_report = create_pdf_report(scores, float(latest["FFS"]), str(latest["context"]))
                st.markdown(get_download_link(pdf_report, "ffs_recommendations.pdf"), unsafe_allow_html=True)
            except Exception as e:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF. –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: " + str(e))

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("FFS Calculator ¬© 2023 | –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–≤–æ–±–æ–¥—ã")
